#!/usr/bin/python
# -*- coding: utf-8 -*- 
console_encoding = 'windows-1251'
import os, sys, subprocess
import contextlib
import re, math
from threading import Thread
try:
	 import wx
except ImportError:
	 raise ImportError,"The wxPython module is required to run this program."

##########################
########## MAIN ##########
##########################

## muting stdout
#class DummyFile(object):
#	 def write(self, x): pass

#@contextlib.contextmanager
#def nostdout():
#	 save_stdout = sys.stdout
#	 sys.stdout = DummyFile()
#	 yield
#	 sys.stdout = save_stdout

class TestThread(Thread):
	 def __init__(self):
			"""Init Worker Thread Class."""
			Thread.__init__(self)
			self.start()	 # start the thread
 
	 def run(self):
			"""Run Worker Thread."""
			# This is the code executing in the new thread.

	number = 1
	fileList = []
	application_path = os.path.dirname(os.path.realpath(sys.argv[0]))

	# counting images recursively
	for root, subFolders, files in os.walk(rootdir):
	 		for file in files:
				if os.path.splitext(file)[1].lower() in ('.jpg', '.jpeg'):
		f = os.path.join(root,file)
		f = '"%s"' % f
				fileList.append(f)
	total = len(fileList)

	# rounding up dimensions
	def roundup(dim):
		no = 0
		while no != 1:
		x = int(round(dim, -1))
		if x<dim: dim = dim+5
		else: dim2 = x; no = 1; return dim2

	# resizing stamp
	def stamp_small(dim2):
		if dim2>900: dim2 = 900
		if dim2>=700: scale = 40 # size = % of final dimension (dim2)
		elif dim2<=400: scale = 65
		else: scale = 55
		stampsize = float(dim2)/float(100)*scale
		stampsize = int(math.ceil(stampsize))
		tempstamp = "%s\\tempstamp.png" % application_path
		os.system('convert %s -resize %d %s' % (stamp, stampsize, tempstamp))
		return tempstamp

################
### resizing ###
################
	for root, subdirs, files in os.walk(rootdir): # recursion
	 		for file in files:
				if os.path.splitext(file)[1].lower() in ('.jpg', '.jpeg'):
			#file = file.decode('windows-1251')
			#root = root.decode('windows-1251')
				 img = os.path.join(root, file)
			img = '"%s"' % img
			os.chdir(root)
			if not os.path.exists('./stamp'): os.makedirs('./stamp')
			#wx.CallAfter(Publisher.sendMessage, "update", "Processing file %d out of %d" % (number, total))
			print "Processing file %d out of %d" % (number, total)
	#get width
			wid = subprocess.Popen(['identify', '-format', '%w', '%s' % file.encode('windows-1251')], shell=True, stdout=subprocess.PIPE)
			wid = str(wid.communicate())
			wid = int(re.sub("\D", "", wid)) #\D removes any non-digit character
	#get height
			hei = subprocess.Popen(['identify', '-format', '%h', '%s' % file.encode('windows-1251')], shell=True, stdout=subprocess.PIPE)
			hei = str(hei.communicate())
			hei = int(re.sub("\D", "", hei)) #\D removes any non-digit character

			if wid > hei:
		dim = wid
			else:
		dim = hei
			dim2 = roundup(dim)
			newfile = "./stamp/%03d.jpg" % number
	#square
				 os.system('convert '"%s"' -background white -gravity center -extent "%sx%s" "%s"' % (img.encode('windows-1251'), dim2, dim2, newfile))# square
			if dim2>900: os.system('convert %s -resize 900 %s' % (newfile, newfile))#resize files over 900 pixels
	#stamping
			if os.path.exists(stamp):
				tempstamp = stamp_small(dim2) # call resizer
				os.system('composite -gravity SouthEast	%s	%s	%s' % (tempstamp, newfile, newfile))
				os.remove(tempstamp)
			number = number + 1
	#wx.CallAfter(Publisher.sendMessage, "update", "Done!")
	print "Done!"
	os.chdir(application_path)


########################
######## GUI ###########
########################
class MyForm(wx.Frame):
 
	 #----------------------------------------------------------------------
	 def __init__(self):
			wx.Frame.__init__(self, None, wx.ID_ANY, "Mass Watermark Stamper")
			# Add a panel so it looks the correct on all platforms
			panel = wx.Panel(self, wx.ID_ANY)

	 #---------------------------------------------------------------------- 
 
			sizer = wx.GridBagSizer(5, 5)
	text1 = wx.StaticText(panel, label="Mass Watermark Stamper")
			sizer.Add(text1, pos=(0, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, 
				border=15)

			#icon = wx.StaticBitmap(panel, bitmap=wx.Bitmap('exec.png'))
			#sizer.Add(icon, pos=(0, 4), flag=wx.TOP|wx.RIGHT|wx.ALIGN_RIGHT, border=5)

			line = wx.StaticLine(panel)
			sizer.Add(line, pos=(1, 0), span=(1, 5), 
				flag=wx.EXPAND|wx.BOTTOM, border=10)

			text2 = wx.StaticText(panel, label="Folder:")
			sizer.Add(text2, pos=(2, 0), flag=wx.LEFT|wx.TOP, border=10)

			self.tc2 = wx.TextCtrl(panel, style = wx.TE_PROCESS_ENTER)
			sizer.Add(self.tc2, pos=(2, 1), span=(1, 3), flag=wx.TOP|wx.EXPAND, border=5)
	self.tc2.Bind(wx.EVT_TEXT_ENTER, self.OnPressEnter)

			button1 = wx.Button(panel, label="Browse...")
			sizer.Add(button1, pos=(2, 4), flag=wx.TOP|wx.RIGHT, border=5)
	button1.Bind(wx.EVT_BUTTON, self.BrowseBtn)

	text3 = wx.StaticText(panel, label="Watermark:")
			sizer.Add(text3, pos=(3, 0), flag=wx.LEFT|wx.TOP, border=10)

	self.combo = wx.ComboBox(panel, choices=watermarks)
	sizer.Add(self.combo, pos=(3, 1), span=(1, 3), flag=wx.TOP|wx.EXPAND, border=5)
	self.combo.Bind(wx.EVT_COMBOBOX, self.onSelect)

	self.displayLbl = wx.StaticText(panel, label="Select a folder to start.")
	sizer.Add(self.displayLbl, pos=(4, 0), span=(1, 5), flag=wx.LEFT|wx.TOP, border=10)

#			sb = wx.StaticBox(panel, label="Optional Attributes")

#			boxsizer = wx.StaticBoxSizer(sb, wx.VERTICAL)
#			boxsizer.Add(wx.CheckBox(panel, label="Public"), 
#				flag=wx.LEFT|wx.TOP, border=5)
#			boxsizer.Add(wx.CheckBox(panel, label="Generate Default Constructor"),
#				flag=wx.LEFT, border=5)
#			boxsizer.Add(wx.CheckBox(panel, label="Generate Main Method"), 
#				flag=wx.LEFT|wx.BOTTOM, border=5)
#			sizer.Add(boxsizer, pos=(5, 0), span=(1, 5), 
#				flag=wx.EXPAND|wx.TOP|wx.LEFT|wx.RIGHT , border=10)

#			button3 = wx.Button(panel, label='Help')
#			sizer.Add(button3, pos=(7, 0), flag=wx.LEFT, border=10)

			self.button4 = wx.Button(panel, label="Go!")
			sizer.Add(self.button4, pos=(6, 3))
	self.button4.Bind(wx.EVT_BUTTON, self.GoBtn)
	self.button4.Disable()

			button5 = wx.Button(panel, label="Quit")
			sizer.Add(button5, pos=(6, 4), flag=wx.BOTTOM|wx.RIGHT, border=5)
	button5.Bind(wx.EVT_BUTTON, self.QuitBtn)

			sizer.AddGrowableCol(2)
			
			panel.SetSizer(sizer)
 
	 #----------------------------------------------------------------------
	 def BrowseBtn(self, event):
	dlg = wx.DirDialog(self, "Choose a directory:", style=wx.DD_DEFAULT_STYLE)
			if dlg.ShowModal() == wx.ID_OK:
		 self.tc2.Remove(0,99999999)
		 global rootdir
		 rootdir = dlg.GetPath()
		 rootdir = rootdir.decode('windows-1251')
			dlg.Destroy()
	if os.path.exists(rootdir): 
		 self.button4.Enable()
		 self.tc2.write(rootdir)
		 self.displayLbl.SetLabel("Ready. Press \"Go!\" to start.")
	else: self.button4.Disable(); self.displayLbl.SetLabel("Error! No such folder.")
 
	 def GoBtn(self, event):
			# Runs the thread
			TestThread()
			self.button4.Disable()

	 def OnPressEnter(self,event):
	global rootdir
	rootdir = self.tc2.GetValue()
	if os.path.exists(rootdir): 
		 self.button4.Enable()
		 self.displayLbl.SetLabel("Ready. Press \"Go!\" to start.")
	else: self.button4.Disable(); self.displayLbl.SetLabel("Error! No such folder.")

	 def QuitBtn(self, event):
	self.Close()

	 def onSelect(self, event):
	stamp_name = self.combo.GetStringSelection()
	global stamp
	stamp = os.path.join(application_path, stamp_name)
	self.displayLbl.SetLabel(stamp)

	 #----------------------------------------------------------------------
	 def updateDisplay(self, msg):
			# Receives data from thread and updates the display
			t = msg.data
			self.displayLbl.SetLabel("%s" % t)
	if t == "Done!": self.button4.Enable()

watermarks = []
global stamp
stamp_name_default = "stamp.png"
application_path = os.path.dirname(os.path.realpath(sys.argv[0]))
stamp = os.path.join(application_path, stamp_name_default)

root_path = os.listdir(application_path)
for file in root_path:
	if os.path.splitext(file)[1].lower() in ('.png', '.jpg'):
	 f = os.path.join(root_path,file)
	 watermarks.append(file)
 
#----------------------------------------------------------------------
# Run the program
if __name__ == "__main__":
	 app = wx.PySimpleApp()
	 frame = MyForm().Show()
	 app.MainLoop()
