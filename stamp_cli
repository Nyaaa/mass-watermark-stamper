#!/usr/bin/python
# -*- coding: utf-8 -*- 
console_encoding = 'windows-1251'
import os, sys, subprocess
import contextlib, tempfile
import re, math
import argparse

# parsing arguments ---------------------
parser = argparse.ArgumentParser()
parser.add_argument('-g', '--gravity', action='store', dest='gravity', help='tells where to put a stamp', nargs='?', default='se', choices=['n', 's', 'e', 'w', 'nw', 'sw', 'ne', 'se', 'c'])
parser.add_argument('-f', '--folder', action='store', dest='folder', help='folder to process', nargs=1, required=True)
parser.add_argument('-s', '--stamp', action='store', dest='stamp', help='path to your stamp', nargs='?', default='0')
results = parser.parse_args()

get_grav = results.gravity
path = results.folder
stamp = results.stamp
rootdir = path[0].decode('windows-1251')

# ---------------------------------------
#rootdir = sys.argv[1].decode('windows-1251') # positional argument
#print rootdir
number = 1
fileList = []
temp = tempfile.TemporaryFile()
stamp_name = "stamp.png"

application_path = os.path.dirname(os.path.realpath(sys.argv[0]))
if stamp == "0": stamp = os.path.join(application_path, stamp_name)
print application_path, stamp
if os.path.exists(stamp): print "Using stamp:", stamp
else: print "No stamp found"

# interpret gravity argument------------
grav_sh = ['n', 's', 'e', 'w', 'nw', 'sw', 'ne', 'se', 'c']
grav_full = ['North', 'South', 'East', 'West', 'NorthWest', 'SouthWest', 'NorthEast', 'SouthEast', 'Center']
loc = int(grav_sh.index(get_grav))
gravity = grav_full[loc]

# muting stdout-------------------------
class DummyFile(object):
    def write(self, x): pass

@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = DummyFile()
    yield
    sys.stdout = save_stdout

# counting images recursively----------
for root, subFolders, files in os.walk(rootdir):
    for file in files:
        if os.path.splitext(file)[1].lower() in ('.jpg', '.jpeg'):
		f = os.path.join(root,file)
	        fileList.append(file)
total = len(fileList)

# rounding up dimensions---------------
def roundup(dim):
	no = 0
	while no != 1:
		x = int(round(dim, -1))
		if x<dim: dim = dim+5
		else: dim2 = x; no = 1; return dim2

# resizing stamp-----------------------
def stamp_small(dim2):
	if dim2>900: dim2 = 900
	if dim2>=700: scale = 40 # size = % of final dimension (dim2)
	elif dim2<=400: scale = 65
	else: scale = 55
	stampsize = float(dim2)/float(100)*scale
	stampsize = int(math.ceil(stampsize))
	tempstamp = "%s\\tempstamp.png" % sys.path[0]
	os.system('convert %s -resize %d %s' % (stamp, stampsize, tempstamp))
	return tempstamp


################
### resizing ###
################
for root, subdirs, files in os.walk(rootdir): # recursion
    for file in files:
        if os.path.splitext(file)[1].lower() in ('.jpg', '.jpeg'):
	     #print file
	     file = file#.decode('windows-1251')
	     #print root
	     root = root#.decode('windows-1251')
             img = os.path.join(root, file)
	     img = '"%s"' % img
	     #print img
	     fileList.append(img)
	     os.chdir(root)
	     if not os.path.exists('./stamp'): os.makedirs('./stamp')
	     print 'Processing file %d out of %d' % (number, total)
	#get width
             wid = subprocess.Popen(['identify', '-format', '%w', '%s' % file.encode('windows-1251')], shell=True, stdout=subprocess.PIPE)
	     wid = str(wid.communicate())
	     wid = int(re.sub("\D", "", wid)) #\D removes any non-digit character
	#get height
	     hei = subprocess.Popen(['identify', '-format', '%h', '%s' % file.encode('windows-1251')], shell=True, stdout=subprocess.PIPE)
	     hei = str(hei.communicate())
	     hei = int(re.sub("\D", "", hei)) #\D removes any non-digit character

	     if wid > hei:
		dim = wid
	     else:
		dim = hei
	     dim2 = roundup(dim)
	     newfile = "./stamp/%03d.jpg" % number
	     os.system('convert '"%s"' -background white -gravity center -extent "%sx%s" "%s"' % (img.encode('windows-1251'), dim2, dim2, newfile))# square
             if dim2>900: os.system('convert %s -resize 900 %s' % (newfile, newfile))#resize files over 900 pixels
	     #print 'done'
	#stamping
	     if os.path.exists(stamp):
	     	tempstamp = stamp_small(dim2) # call resizer
	     	os.system('composite -gravity %s  %s  %s  %s' % (gravity, tempstamp, newfile, newfile))
		os.remove(tempstamp)
	     number = number + 1
print "Done!"
